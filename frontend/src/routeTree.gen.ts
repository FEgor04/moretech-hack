/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as ProtectedLayoutRouteImport } from './routes/_protectedLayout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedLayoutVaccanciesRouteImport } from './routes/_protectedLayout.vaccancies'

const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedLayoutRoute = ProtectedLayoutRouteImport.update({
  id: '/_protectedLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedLayoutVaccanciesRoute =
  ProtectedLayoutVaccanciesRouteImport.update({
    id: '/vaccancies',
    path: '/vaccancies',
    getParentRoute: () => ProtectedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/vaccancies': typeof ProtectedLayoutVaccanciesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/vaccancies': typeof ProtectedLayoutVaccanciesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protectedLayout': typeof ProtectedLayoutRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/_protectedLayout/vaccancies': typeof ProtectedLayoutVaccanciesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-in' | '/vaccancies'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign-in' | '/vaccancies'
  id:
    | '__root__'
    | '/'
    | '/_protectedLayout'
    | '/sign-in'
    | '/_protectedLayout/vaccancies'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren
  SignInRoute: typeof SignInRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protectedLayout': {
      id: '/_protectedLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protectedLayout/vaccancies': {
      id: '/_protectedLayout/vaccancies'
      path: '/vaccancies'
      fullPath: '/vaccancies'
      preLoaderRoute: typeof ProtectedLayoutVaccanciesRouteImport
      parentRoute: typeof ProtectedLayoutRoute
    }
  }
}

interface ProtectedLayoutRouteChildren {
  ProtectedLayoutVaccanciesRoute: typeof ProtectedLayoutVaccanciesRoute
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedLayoutVaccanciesRoute: ProtectedLayoutVaccanciesRoute,
}

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
  SignInRoute: SignInRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
