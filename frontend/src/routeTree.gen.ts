/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as ProtectedLayoutRouteRouteImport } from './routes/_protectedLayout/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as InterviewsInterviewIdRouteImport } from './routes/interviews.$interviewId'
import { Route as ProtectedLayoutVacanciesIndexRouteImport } from './routes/_protectedLayout/vacancies/index'
import { Route as ProtectedLayoutCandidatesIndexRouteImport } from './routes/_protectedLayout/candidates/index'
import { Route as ProtectedLayoutVacanciesNewRouteImport } from './routes/_protectedLayout/vacancies/new'
import { Route as ProtectedLayoutVacanciesVacancyIdRouteImport } from './routes/_protectedLayout/vacancies/$vacancyId'
import { Route as ProtectedLayoutCandidatesNewRouteImport } from './routes/_protectedLayout/candidates/new'
import { Route as ProtectedLayoutCandidatesCandidateIdIndexRouteImport } from './routes/_protectedLayout/candidates/$candidateId.index'
import { Route as ProtectedLayoutCandidatesCandidateIdEditRouteImport } from './routes/_protectedLayout/candidates/$candidateId.edit'

const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedLayoutRouteRoute = ProtectedLayoutRouteRouteImport.update({
  id: '/_protectedLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const InterviewsInterviewIdRoute = InterviewsInterviewIdRouteImport.update({
  id: '/interviews/$interviewId',
  path: '/interviews/$interviewId',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedLayoutVacanciesIndexRoute =
  ProtectedLayoutVacanciesIndexRouteImport.update({
    id: '/vacancies/',
    path: '/vacancies/',
    getParentRoute: () => ProtectedLayoutRouteRoute,
  } as any)
const ProtectedLayoutCandidatesIndexRoute =
  ProtectedLayoutCandidatesIndexRouteImport.update({
    id: '/candidates/',
    path: '/candidates/',
    getParentRoute: () => ProtectedLayoutRouteRoute,
  } as any)
const ProtectedLayoutVacanciesNewRoute =
  ProtectedLayoutVacanciesNewRouteImport.update({
    id: '/vacancies/new',
    path: '/vacancies/new',
    getParentRoute: () => ProtectedLayoutRouteRoute,
  } as any)
const ProtectedLayoutVacanciesVacancyIdRoute =
  ProtectedLayoutVacanciesVacancyIdRouteImport.update({
    id: '/vacancies/$vacancyId',
    path: '/vacancies/$vacancyId',
    getParentRoute: () => ProtectedLayoutRouteRoute,
  } as any)
const ProtectedLayoutCandidatesNewRoute =
  ProtectedLayoutCandidatesNewRouteImport.update({
    id: '/candidates/new',
    path: '/candidates/new',
    getParentRoute: () => ProtectedLayoutRouteRoute,
  } as any)
const ProtectedLayoutCandidatesCandidateIdIndexRoute =
  ProtectedLayoutCandidatesCandidateIdIndexRouteImport.update({
    id: '/candidates/$candidateId/',
    path: '/candidates/$candidateId/',
    getParentRoute: () => ProtectedLayoutRouteRoute,
  } as any)
const ProtectedLayoutCandidatesCandidateIdEditRoute =
  ProtectedLayoutCandidatesCandidateIdEditRouteImport.update({
    id: '/candidates/$candidateId/edit',
    path: '/candidates/$candidateId/edit',
    getParentRoute: () => ProtectedLayoutRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/interviews/$interviewId': typeof InterviewsInterviewIdRoute
  '/candidates/new': typeof ProtectedLayoutCandidatesNewRoute
  '/vacancies/$vacancyId': typeof ProtectedLayoutVacanciesVacancyIdRoute
  '/vacancies/new': typeof ProtectedLayoutVacanciesNewRoute
  '/candidates': typeof ProtectedLayoutCandidatesIndexRoute
  '/vacancies': typeof ProtectedLayoutVacanciesIndexRoute
  '/candidates/$candidateId/edit': typeof ProtectedLayoutCandidatesCandidateIdEditRoute
  '/candidates/$candidateId': typeof ProtectedLayoutCandidatesCandidateIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/interviews/$interviewId': typeof InterviewsInterviewIdRoute
  '/candidates/new': typeof ProtectedLayoutCandidatesNewRoute
  '/vacancies/$vacancyId': typeof ProtectedLayoutVacanciesVacancyIdRoute
  '/vacancies/new': typeof ProtectedLayoutVacanciesNewRoute
  '/candidates': typeof ProtectedLayoutCandidatesIndexRoute
  '/vacancies': typeof ProtectedLayoutVacanciesIndexRoute
  '/candidates/$candidateId/edit': typeof ProtectedLayoutCandidatesCandidateIdEditRoute
  '/candidates/$candidateId': typeof ProtectedLayoutCandidatesCandidateIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protectedLayout': typeof ProtectedLayoutRouteRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/interviews/$interviewId': typeof InterviewsInterviewIdRoute
  '/_protectedLayout/candidates/new': typeof ProtectedLayoutCandidatesNewRoute
  '/_protectedLayout/vacancies/$vacancyId': typeof ProtectedLayoutVacanciesVacancyIdRoute
  '/_protectedLayout/vacancies/new': typeof ProtectedLayoutVacanciesNewRoute
  '/_protectedLayout/candidates/': typeof ProtectedLayoutCandidatesIndexRoute
  '/_protectedLayout/vacancies/': typeof ProtectedLayoutVacanciesIndexRoute
  '/_protectedLayout/candidates/$candidateId/edit': typeof ProtectedLayoutCandidatesCandidateIdEditRoute
  '/_protectedLayout/candidates/$candidateId/': typeof ProtectedLayoutCandidatesCandidateIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-in'
    | '/interviews/$interviewId'
    | '/candidates/new'
    | '/vacancies/$vacancyId'
    | '/vacancies/new'
    | '/candidates'
    | '/vacancies'
    | '/candidates/$candidateId/edit'
    | '/candidates/$candidateId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/interviews/$interviewId'
    | '/candidates/new'
    | '/vacancies/$vacancyId'
    | '/vacancies/new'
    | '/candidates'
    | '/vacancies'
    | '/candidates/$candidateId/edit'
    | '/candidates/$candidateId'
  id:
    | '__root__'
    | '/'
    | '/_protectedLayout'
    | '/sign-in'
    | '/interviews/$interviewId'
    | '/_protectedLayout/candidates/new'
    | '/_protectedLayout/vacancies/$vacancyId'
    | '/_protectedLayout/vacancies/new'
    | '/_protectedLayout/candidates/'
    | '/_protectedLayout/vacancies/'
    | '/_protectedLayout/candidates/$candidateId/edit'
    | '/_protectedLayout/candidates/$candidateId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedLayoutRouteRoute: typeof ProtectedLayoutRouteRouteWithChildren
  SignInRoute: typeof SignInRoute
  InterviewsInterviewIdRoute: typeof InterviewsInterviewIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protectedLayout': {
      id: '/_protectedLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/interviews/$interviewId': {
      id: '/interviews/$interviewId'
      path: '/interviews/$interviewId'
      fullPath: '/interviews/$interviewId'
      preLoaderRoute: typeof InterviewsInterviewIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protectedLayout/vacancies/': {
      id: '/_protectedLayout/vacancies/'
      path: '/vacancies'
      fullPath: '/vacancies'
      preLoaderRoute: typeof ProtectedLayoutVacanciesIndexRouteImport
      parentRoute: typeof ProtectedLayoutRouteRoute
    }
    '/_protectedLayout/candidates/': {
      id: '/_protectedLayout/candidates/'
      path: '/candidates'
      fullPath: '/candidates'
      preLoaderRoute: typeof ProtectedLayoutCandidatesIndexRouteImport
      parentRoute: typeof ProtectedLayoutRouteRoute
    }
    '/_protectedLayout/vacancies/new': {
      id: '/_protectedLayout/vacancies/new'
      path: '/vacancies/new'
      fullPath: '/vacancies/new'
      preLoaderRoute: typeof ProtectedLayoutVacanciesNewRouteImport
      parentRoute: typeof ProtectedLayoutRouteRoute
    }
    '/_protectedLayout/vacancies/$vacancyId': {
      id: '/_protectedLayout/vacancies/$vacancyId'
      path: '/vacancies/$vacancyId'
      fullPath: '/vacancies/$vacancyId'
      preLoaderRoute: typeof ProtectedLayoutVacanciesVacancyIdRouteImport
      parentRoute: typeof ProtectedLayoutRouteRoute
    }
    '/_protectedLayout/candidates/new': {
      id: '/_protectedLayout/candidates/new'
      path: '/candidates/new'
      fullPath: '/candidates/new'
      preLoaderRoute: typeof ProtectedLayoutCandidatesNewRouteImport
      parentRoute: typeof ProtectedLayoutRouteRoute
    }
    '/_protectedLayout/candidates/$candidateId/': {
      id: '/_protectedLayout/candidates/$candidateId/'
      path: '/candidates/$candidateId'
      fullPath: '/candidates/$candidateId'
      preLoaderRoute: typeof ProtectedLayoutCandidatesCandidateIdIndexRouteImport
      parentRoute: typeof ProtectedLayoutRouteRoute
    }
    '/_protectedLayout/candidates/$candidateId/edit': {
      id: '/_protectedLayout/candidates/$candidateId/edit'
      path: '/candidates/$candidateId/edit'
      fullPath: '/candidates/$candidateId/edit'
      preLoaderRoute: typeof ProtectedLayoutCandidatesCandidateIdEditRouteImport
      parentRoute: typeof ProtectedLayoutRouteRoute
    }
  }
}

interface ProtectedLayoutRouteRouteChildren {
  ProtectedLayoutCandidatesNewRoute: typeof ProtectedLayoutCandidatesNewRoute
  ProtectedLayoutVacanciesVacancyIdRoute: typeof ProtectedLayoutVacanciesVacancyIdRoute
  ProtectedLayoutVacanciesNewRoute: typeof ProtectedLayoutVacanciesNewRoute
  ProtectedLayoutCandidatesIndexRoute: typeof ProtectedLayoutCandidatesIndexRoute
  ProtectedLayoutVacanciesIndexRoute: typeof ProtectedLayoutVacanciesIndexRoute
  ProtectedLayoutCandidatesCandidateIdEditRoute: typeof ProtectedLayoutCandidatesCandidateIdEditRoute
  ProtectedLayoutCandidatesCandidateIdIndexRoute: typeof ProtectedLayoutCandidatesCandidateIdIndexRoute
}

const ProtectedLayoutRouteRouteChildren: ProtectedLayoutRouteRouteChildren = {
  ProtectedLayoutCandidatesNewRoute: ProtectedLayoutCandidatesNewRoute,
  ProtectedLayoutVacanciesVacancyIdRoute:
    ProtectedLayoutVacanciesVacancyIdRoute,
  ProtectedLayoutVacanciesNewRoute: ProtectedLayoutVacanciesNewRoute,
  ProtectedLayoutCandidatesIndexRoute: ProtectedLayoutCandidatesIndexRoute,
  ProtectedLayoutVacanciesIndexRoute: ProtectedLayoutVacanciesIndexRoute,
  ProtectedLayoutCandidatesCandidateIdEditRoute:
    ProtectedLayoutCandidatesCandidateIdEditRoute,
  ProtectedLayoutCandidatesCandidateIdIndexRoute:
    ProtectedLayoutCandidatesCandidateIdIndexRoute,
}

const ProtectedLayoutRouteRouteWithChildren =
  ProtectedLayoutRouteRoute._addFileChildren(ProtectedLayoutRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedLayoutRouteRoute: ProtectedLayoutRouteRouteWithChildren,
  SignInRoute: SignInRoute,
  InterviewsInterviewIdRoute: InterviewsInterviewIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
