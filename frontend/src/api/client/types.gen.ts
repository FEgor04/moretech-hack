// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_upload_cv_candidates_upload_cv_post
 */
export type BodyUploadCvCandidatesUploadCvPost = {
    /**
     * Cv File
     */
    cv_file: Blob | File;
};

/**
 * Body_upload_vacancy_pdf_vacancies_upload_pdf_post
 */
export type BodyUploadVacancyPdfVacanciesUploadPdfPost = {
    /**
     * Pdf File
     */
    pdf_file: Blob | File;
};

/**
 * CandidateCreate
 */
export type CandidateCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Position
     */
    position: string;
    /**
     * Experience
     */
    experience?: Array<ExperienceItem> | null;
    status?: CandidateStatus;
    /**
     * Gigachat File Id
     */
    gigachat_file_id?: string | null;
    /**
     * Skills
     */
    skills?: Array<string> | null;
    /**
     * Tech
     */
    tech?: Array<string> | null;
    /**
     * Education
     */
    education?: Array<EducationItem> | null;
    /**
     * Geo
     */
    geo?: string | null;
    employment_type?: EmploymentType | null;
};

/**
 * CandidateRead
 */
export type CandidateRead = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Position
     */
    position: string;
    /**
     * Experience
     */
    experience?: Array<ExperienceItem> | null;
    status?: CandidateStatus;
    /**
     * Gigachat File Id
     */
    gigachat_file_id?: string | null;
    /**
     * Skills
     */
    skills?: Array<string> | null;
    /**
     * Tech
     */
    tech?: Array<string> | null;
    /**
     * Education
     */
    education?: Array<EducationItem> | null;
    /**
     * Geo
     */
    geo?: string | null;
    employment_type?: EmploymentType | null;
    /**
     * Id
     */
    id: string;
};

/**
 * CandidateStatus
 */
export type CandidateStatus = 'pending' | 'reviewing' | 'interviewing' | 'accepted' | 'rejected' | 'on_hold';

/**
 * EducationItem
 */
export type EducationItem = {
    /**
     * Organization
     */
    organization: string;
    /**
     * Speciality
     */
    speciality: string;
    /**
     * Type
     */
    type?: string | null;
};

/**
 * EmploymentType
 */
export type EmploymentType = 'полная занятость' | 'частичная занятость' | 'контракт' | 'стажировка';

/**
 * ExperienceItem
 */
export type ExperienceItem = {
    /**
     * Company
     */
    company: string;
    /**
     * Position
     */
    position: string;
    /**
     * Years
     */
    years: number;
};

/**
 * ExperienceLevel
 */
export type ExperienceLevel = 'младший' | 'средний' | 'старший' | 'ведущий';

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * InterviewCreate
 */
export type InterviewCreate = {
    /**
     * Candidate Id
     * UUID of the candidate
     */
    candidate_id: string;
    /**
     * Vacancy Id
     */
    vacancy_id?: number | null;
    /**
     * Transcript
     */
    transcript?: string | null;
    /**
     * Recording Url
     */
    recording_url?: string | null;
    /**
     * Status
     */
    status?: string | null;
    state?: InterviewState;
    /**
     * Feedback
     */
    feedback?: string | null;
    /**
     * Feedback Positive
     */
    feedback_positive?: boolean | null;
};

/**
 * InterviewMessageCreateRequest
 */
export type InterviewMessageCreateRequest = {
    /**
     * Text
     */
    text: string;
};

/**
 * InterviewMessageRead
 */
export type InterviewMessageRead = {
    /**
     * Interview Id
     */
    interview_id: string;
    /**
     * Index
     */
    index: number;
    /**
     * Text
     */
    text?: string | null;
    type: InterviewMessageType;
};

/**
 * InterviewMessageType
 */
export type InterviewMessageType = 'system' | 'user' | 'assistant';

/**
 * InterviewNoteCreate
 */
export type InterviewNoteCreate = {
    /**
     * Interview Id
     */
    interview_id: string;
    /**
     * Text
     */
    text: string;
};

/**
 * InterviewNoteRead
 */
export type InterviewNoteRead = {
    /**
     * Interview Id
     */
    interview_id: string;
    /**
     * Text
     */
    text: string;
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at?: string | null;
};

/**
 * InterviewRead
 */
export type InterviewRead = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Id
     */
    id: string;
    /**
     * Candidate Id
     */
    candidate_id: string;
    /**
     * Vacancy Id
     */
    vacancy_id?: number | null;
    /**
     * Transcript
     */
    transcript?: string | null;
    /**
     * Recording Url
     */
    recording_url?: string | null;
    state: InterviewState;
    /**
     * Feedback
     */
    feedback?: string | null;
    /**
     * Feedback Positive
     */
    feedback_positive?: boolean | null;
};

/**
 * InterviewState
 */
export type InterviewState = 'initialized' | 'in_progress' | 'done';

/**
 * MeResponse
 */
export type MeResponse = {
    /**
     * User Id
     */
    user_id: number;
};

/**
 * NoteCreate
 */
export type NoteCreate = {
    /**
     * Vacancy Id
     */
    vacancy_id: number;
    /**
     * Text
     */
    text: string;
};

/**
 * NoteRead
 */
export type NoteRead = {
    /**
     * Vacancy Id
     */
    vacancy_id: number;
    /**
     * Text
     */
    text: string;
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at?: string | null;
};

/**
 * NoteUpdate
 */
export type NoteUpdate = {
    /**
     * Text
     */
    text: string;
};

/**
 * SignInRequest
 */
export type SignInRequest = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * TokenResponse
 */
export type TokenResponse = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Name
     */
    name: string;
    /**
     * Role
     */
    role: string;
};

/**
 * UserRead
 */
export type UserRead = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Email
     */
    email: string;
    /**
     * Name
     */
    name: string;
    /**
     * Role
     */
    role: string;
    /**
     * Id
     */
    id: number;
};

/**
 * VacancyCreate
 */
export type VacancyCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status
     */
    status?: string | null;
    /**
     * Gigachat File Id
     */
    gigachat_file_id?: string | null;
    /**
     * Company
     */
    company?: string | null;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Salary Min
     */
    salary_min?: number | null;
    /**
     * Salary Max
     */
    salary_max?: number | null;
    employment_type?: EmploymentType | null;
    experience_level?: ExperienceLevel | null;
    /**
     * Requirements
     */
    requirements?: string | null;
    /**
     * Benefits
     */
    benefits?: string | null;
    /**
     * Skills
     */
    skills?: Array<string> | null;
    /**
     * Responsibilities
     */
    responsibilities?: Array<string> | null;
    /**
     * Domain
     */
    domain?: string | null;
    /**
     * Education
     */
    education?: string | null;
    /**
     * Minor Skills
     */
    minor_skills?: Array<string> | null;
    /**
     * Company Info
     */
    company_info?: string | null;
};

/**
 * VacancyRead
 */
export type VacancyRead = {
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status
     */
    status?: string | null;
    /**
     * Gigachat File Id
     */
    gigachat_file_id?: string | null;
    /**
     * Company
     */
    company?: string | null;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Salary Min
     */
    salary_min?: number | null;
    /**
     * Salary Max
     */
    salary_max?: number | null;
    employment_type?: EmploymentType | null;
    experience_level?: ExperienceLevel | null;
    /**
     * Requirements
     */
    requirements?: string | null;
    /**
     * Benefits
     */
    benefits?: string | null;
    /**
     * Skills
     */
    skills?: Array<string> | null;
    /**
     * Responsibilities
     */
    responsibilities?: Array<string> | null;
    /**
     * Domain
     */
    domain?: string | null;
    /**
     * Education
     */
    education?: string | null;
    /**
     * Minor Skills
     */
    minor_skills?: Array<string> | null;
    /**
     * Company Info
     */
    company_info?: string | null;
    /**
     * Id
     */
    id: number;
};

/**
 * VacancyUpdate
 */
export type VacancyUpdate = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Status
     */
    status?: string | null;
    /**
     * Gigachat File Id
     */
    gigachat_file_id?: string | null;
    /**
     * Company
     */
    company?: string | null;
    /**
     * Location
     */
    location?: string | null;
    /**
     * Salary Min
     */
    salary_min?: number | null;
    /**
     * Salary Max
     */
    salary_max?: number | null;
    employment_type?: EmploymentType | null;
    experience_level?: ExperienceLevel | null;
    /**
     * Requirements
     */
    requirements?: string | null;
    /**
     * Benefits
     */
    benefits?: string | null;
    /**
     * Skills
     */
    skills?: Array<string> | null;
    /**
     * Responsibilities
     */
    responsibilities?: Array<string> | null;
    /**
     * Domain
     */
    domain?: string | null;
    /**
     * Education
     */
    education?: string | null;
    /**
     * Minor Skills
     */
    minor_skills?: Array<string> | null;
    /**
     * Company Info
     */
    company_info?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type HealthHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthHealthGetResponses = {
    /**
     * Response Health Health Get
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type HealthHealthGetResponse = HealthHealthGetResponses[keyof HealthHealthGetResponses];

export type ListUsersUsersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/';
};

export type ListUsersUsersGetResponses = {
    /**
     * Response List Users Users  Get
     * Successful Response
     */
    200: Array<UserRead>;
};

export type ListUsersUsersGetResponse = ListUsersUsersGetResponses[keyof ListUsersUsersGetResponses];

export type CreateUserUsersPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/users/';
};

export type CreateUserUsersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserUsersPostError = CreateUserUsersPostErrors[keyof CreateUserUsersPostErrors];

export type CreateUserUsersPostResponses = {
    /**
     * Successful Response
     */
    201: UserRead;
};

export type CreateUserUsersPostResponse = CreateUserUsersPostResponses[keyof CreateUserUsersPostResponses];

export type DeleteUserUsersUserIdDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type DeleteUserUsersUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserUsersUserIdDeleteError = DeleteUserUsersUserIdDeleteErrors[keyof DeleteUserUsersUserIdDeleteErrors];

export type DeleteUserUsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteUserUsersUserIdDeleteResponse = DeleteUserUsersUserIdDeleteResponses[keyof DeleteUserUsersUserIdDeleteResponses];

export type GetUserUsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type GetUserUsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserUsersUserIdGetError = GetUserUsersUserIdGetErrors[keyof GetUserUsersUserIdGetErrors];

export type GetUserUsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserRead;
};

export type GetUserUsersUserIdGetResponse = GetUserUsersUserIdGetResponses[keyof GetUserUsersUserIdGetResponses];

export type TestGigachatConnectionCandidatesTestGigachatGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidates/test-gigachat';
};

export type TestGigachatConnectionCandidatesTestGigachatGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListCandidatesCandidatesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/candidates/';
};

export type ListCandidatesCandidatesGetResponses = {
    /**
     * Response List Candidates Candidates  Get
     * Successful Response
     */
    200: Array<CandidateRead>;
};

export type ListCandidatesCandidatesGetResponse = ListCandidatesCandidatesGetResponses[keyof ListCandidatesCandidatesGetResponses];

export type CreateCandidateCandidatesPostData = {
    body: CandidateCreate;
    path?: never;
    query?: never;
    url: '/candidates/';
};

export type CreateCandidateCandidatesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCandidateCandidatesPostError = CreateCandidateCandidatesPostErrors[keyof CreateCandidateCandidatesPostErrors];

export type CreateCandidateCandidatesPostResponses = {
    /**
     * Successful Response
     */
    201: CandidateRead;
};

export type CreateCandidateCandidatesPostResponse = CreateCandidateCandidatesPostResponses[keyof CreateCandidateCandidatesPostResponses];

export type DeleteCandidateCandidatesCandidateIdDeleteData = {
    body?: never;
    path: {
        /**
         * Candidate Id
         */
        candidate_id: string;
    };
    query?: never;
    url: '/candidates/{candidate_id}';
};

export type DeleteCandidateCandidatesCandidateIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCandidateCandidatesCandidateIdDeleteError = DeleteCandidateCandidatesCandidateIdDeleteErrors[keyof DeleteCandidateCandidatesCandidateIdDeleteErrors];

export type DeleteCandidateCandidatesCandidateIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteCandidateCandidatesCandidateIdDeleteResponse = DeleteCandidateCandidatesCandidateIdDeleteResponses[keyof DeleteCandidateCandidatesCandidateIdDeleteResponses];

export type GetCandidateCandidatesCandidateIdGetData = {
    body?: never;
    path: {
        /**
         * Candidate Id
         */
        candidate_id: string;
    };
    query?: never;
    url: '/candidates/{candidate_id}';
};

export type GetCandidateCandidatesCandidateIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCandidateCandidatesCandidateIdGetError = GetCandidateCandidatesCandidateIdGetErrors[keyof GetCandidateCandidatesCandidateIdGetErrors];

export type GetCandidateCandidatesCandidateIdGetResponses = {
    /**
     * Successful Response
     */
    200: CandidateRead;
};

export type GetCandidateCandidatesCandidateIdGetResponse = GetCandidateCandidatesCandidateIdGetResponses[keyof GetCandidateCandidatesCandidateIdGetResponses];

export type UpdateCandidateCandidatesCandidateIdPatchData = {
    body: CandidateCreate;
    path: {
        /**
         * Candidate Id
         */
        candidate_id: string;
    };
    query?: never;
    url: '/candidates/{candidate_id}';
};

export type UpdateCandidateCandidatesCandidateIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCandidateCandidatesCandidateIdPatchError = UpdateCandidateCandidatesCandidateIdPatchErrors[keyof UpdateCandidateCandidatesCandidateIdPatchErrors];

export type UpdateCandidateCandidatesCandidateIdPatchResponses = {
    /**
     * Successful Response
     */
    200: CandidateRead;
};

export type UpdateCandidateCandidatesCandidateIdPatchResponse = UpdateCandidateCandidatesCandidateIdPatchResponses[keyof UpdateCandidateCandidatesCandidateIdPatchResponses];

export type UploadCvCandidatesUploadCvPostData = {
    body: BodyUploadCvCandidatesUploadCvPost;
    path?: never;
    query?: never;
    url: '/candidates/upload-cv';
};

export type UploadCvCandidatesUploadCvPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadCvCandidatesUploadCvPostError = UploadCvCandidatesUploadCvPostErrors[keyof UploadCvCandidatesUploadCvPostErrors];

export type UploadCvCandidatesUploadCvPostResponses = {
    /**
     * Successful Response
     */
    201: CandidateRead;
};

export type UploadCvCandidatesUploadCvPostResponse = UploadCvCandidatesUploadCvPostResponses[keyof UploadCvCandidatesUploadCvPostResponses];

export type ListVacanciesVacanciesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vacancies/';
};

export type ListVacanciesVacanciesGetResponses = {
    /**
     * Response List Vacancies Vacancies  Get
     * Successful Response
     */
    200: Array<VacancyRead>;
};

export type ListVacanciesVacanciesGetResponse = ListVacanciesVacanciesGetResponses[keyof ListVacanciesVacanciesGetResponses];

export type CreateVacancyVacanciesPostData = {
    body: VacancyCreate;
    path?: never;
    query?: never;
    url: '/vacancies/';
};

export type CreateVacancyVacanciesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateVacancyVacanciesPostError = CreateVacancyVacanciesPostErrors[keyof CreateVacancyVacanciesPostErrors];

export type CreateVacancyVacanciesPostResponses = {
    /**
     * Successful Response
     */
    201: VacancyRead;
};

export type CreateVacancyVacanciesPostResponse = CreateVacancyVacanciesPostResponses[keyof CreateVacancyVacanciesPostResponses];

export type DeleteVacancyVacanciesVacancyIdDeleteData = {
    body?: never;
    path: {
        /**
         * Vacancy Id
         */
        vacancy_id: number;
    };
    query?: never;
    url: '/vacancies/{vacancy_id}';
};

export type DeleteVacancyVacanciesVacancyIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteVacancyVacanciesVacancyIdDeleteError = DeleteVacancyVacanciesVacancyIdDeleteErrors[keyof DeleteVacancyVacanciesVacancyIdDeleteErrors];

export type DeleteVacancyVacanciesVacancyIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteVacancyVacanciesVacancyIdDeleteResponse = DeleteVacancyVacanciesVacancyIdDeleteResponses[keyof DeleteVacancyVacanciesVacancyIdDeleteResponses];

export type GetVacancyVacanciesVacancyIdGetData = {
    body?: never;
    path: {
        /**
         * Vacancy Id
         */
        vacancy_id: number;
    };
    query?: never;
    url: '/vacancies/{vacancy_id}';
};

export type GetVacancyVacanciesVacancyIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetVacancyVacanciesVacancyIdGetError = GetVacancyVacanciesVacancyIdGetErrors[keyof GetVacancyVacanciesVacancyIdGetErrors];

export type GetVacancyVacanciesVacancyIdGetResponses = {
    /**
     * Successful Response
     */
    200: VacancyRead;
};

export type GetVacancyVacanciesVacancyIdGetResponse = GetVacancyVacanciesVacancyIdGetResponses[keyof GetVacancyVacanciesVacancyIdGetResponses];

export type UpdateVacancyVacanciesVacancyIdPatchData = {
    body: VacancyUpdate;
    path: {
        /**
         * Vacancy Id
         */
        vacancy_id: number;
    };
    query?: never;
    url: '/vacancies/{vacancy_id}';
};

export type UpdateVacancyVacanciesVacancyIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateVacancyVacanciesVacancyIdPatchError = UpdateVacancyVacanciesVacancyIdPatchErrors[keyof UpdateVacancyVacanciesVacancyIdPatchErrors];

export type UpdateVacancyVacanciesVacancyIdPatchResponses = {
    /**
     * Successful Response
     */
    200: VacancyRead;
};

export type UpdateVacancyVacanciesVacancyIdPatchResponse = UpdateVacancyVacanciesVacancyIdPatchResponses[keyof UpdateVacancyVacanciesVacancyIdPatchResponses];

export type ListVacancyNotesVacanciesVacancyIdNotesGetData = {
    body?: never;
    path: {
        /**
         * Vacancy Id
         */
        vacancy_id: number;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/vacancies/{vacancy_id}/notes';
};

export type ListVacancyNotesVacanciesVacancyIdNotesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListVacancyNotesVacanciesVacancyIdNotesGetError = ListVacancyNotesVacanciesVacancyIdNotesGetErrors[keyof ListVacancyNotesVacanciesVacancyIdNotesGetErrors];

export type ListVacancyNotesVacanciesVacancyIdNotesGetResponses = {
    /**
     * Response List Vacancy Notes Vacancies  Vacancy Id  Notes Get
     * Successful Response
     */
    200: Array<NoteRead>;
};

export type ListVacancyNotesVacanciesVacancyIdNotesGetResponse = ListVacancyNotesVacanciesVacancyIdNotesGetResponses[keyof ListVacancyNotesVacanciesVacancyIdNotesGetResponses];

export type CreateVacancyNoteVacanciesVacancyIdNotesPostData = {
    body: NoteCreate;
    path: {
        /**
         * Vacancy Id
         */
        vacancy_id: number;
    };
    query?: never;
    url: '/vacancies/{vacancy_id}/notes';
};

export type CreateVacancyNoteVacanciesVacancyIdNotesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateVacancyNoteVacanciesVacancyIdNotesPostError = CreateVacancyNoteVacanciesVacancyIdNotesPostErrors[keyof CreateVacancyNoteVacanciesVacancyIdNotesPostErrors];

export type CreateVacancyNoteVacanciesVacancyIdNotesPostResponses = {
    /**
     * Successful Response
     */
    201: NoteRead;
};

export type CreateVacancyNoteVacanciesVacancyIdNotesPostResponse = CreateVacancyNoteVacanciesVacancyIdNotesPostResponses[keyof CreateVacancyNoteVacanciesVacancyIdNotesPostResponses];

export type DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteData = {
    body?: never;
    path: {
        /**
         * Vacancy Id
         */
        vacancy_id: number;
        /**
         * Note Id
         */
        note_id: number;
    };
    query?: never;
    url: '/vacancies/{vacancy_id}/notes/{note_id}';
};

export type DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteError = DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteErrors[keyof DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteErrors];

export type DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteResponse = DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteResponses[keyof DeleteVacancyNoteVacanciesVacancyIdNotesNoteIdDeleteResponses];

export type UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchData = {
    body: NoteUpdate;
    path: {
        /**
         * Vacancy Id
         */
        vacancy_id: number;
        /**
         * Note Id
         */
        note_id: number;
    };
    query?: never;
    url: '/vacancies/{vacancy_id}/notes/{note_id}';
};

export type UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchError = UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchErrors[keyof UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchErrors];

export type UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchResponses = {
    /**
     * Successful Response
     */
    200: NoteRead;
};

export type UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchResponse = UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchResponses[keyof UpdateVacancyNoteVacanciesVacancyIdNotesNoteIdPatchResponses];

export type UploadVacancyPdfVacanciesUploadPdfPostData = {
    body: BodyUploadVacancyPdfVacanciesUploadPdfPost;
    path?: never;
    query?: never;
    url: '/vacancies/upload-pdf';
};

export type UploadVacancyPdfVacanciesUploadPdfPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadVacancyPdfVacanciesUploadPdfPostError = UploadVacancyPdfVacanciesUploadPdfPostErrors[keyof UploadVacancyPdfVacanciesUploadPdfPostErrors];

export type UploadVacancyPdfVacanciesUploadPdfPostResponses = {
    /**
     * Successful Response
     */
    201: VacancyRead;
};

export type UploadVacancyPdfVacanciesUploadPdfPostResponse = UploadVacancyPdfVacanciesUploadPdfPostResponses[keyof UploadVacancyPdfVacanciesUploadPdfPostResponses];

export type ListInterviewsInterviewsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/interviews/';
};

export type ListInterviewsInterviewsGetResponses = {
    /**
     * Response List Interviews Interviews  Get
     * Successful Response
     */
    200: Array<InterviewRead>;
};

export type ListInterviewsInterviewsGetResponse = ListInterviewsInterviewsGetResponses[keyof ListInterviewsInterviewsGetResponses];

export type CreateInterviewInterviewsPostData = {
    body: InterviewCreate;
    path?: never;
    query?: never;
    url: '/interviews/';
};

export type CreateInterviewInterviewsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateInterviewInterviewsPostError = CreateInterviewInterviewsPostErrors[keyof CreateInterviewInterviewsPostErrors];

export type CreateInterviewInterviewsPostResponses = {
    /**
     * Successful Response
     */
    201: InterviewRead;
};

export type CreateInterviewInterviewsPostResponse = CreateInterviewInterviewsPostResponses[keyof CreateInterviewInterviewsPostResponses];

export type GetInterviewsByCandidateInterviewsCandidateCandidateIdGetData = {
    body?: never;
    path: {
        /**
         * Candidate Id
         */
        candidate_id: string;
    };
    query?: never;
    url: '/interviews/candidate/{candidate_id}';
};

export type GetInterviewsByCandidateInterviewsCandidateCandidateIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetInterviewsByCandidateInterviewsCandidateCandidateIdGetError = GetInterviewsByCandidateInterviewsCandidateCandidateIdGetErrors[keyof GetInterviewsByCandidateInterviewsCandidateCandidateIdGetErrors];

export type GetInterviewsByCandidateInterviewsCandidateCandidateIdGetResponses = {
    /**
     * Response Get Interviews By Candidate Interviews Candidate  Candidate Id  Get
     * Successful Response
     */
    200: Array<InterviewRead>;
};

export type GetInterviewsByCandidateInterviewsCandidateCandidateIdGetResponse = GetInterviewsByCandidateInterviewsCandidateCandidateIdGetResponses[keyof GetInterviewsByCandidateInterviewsCandidateCandidateIdGetResponses];

export type DeleteInterviewInterviewsInterviewIdDeleteData = {
    body?: never;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
    };
    query?: never;
    url: '/interviews/{interview_id}';
};

export type DeleteInterviewInterviewsInterviewIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteInterviewInterviewsInterviewIdDeleteError = DeleteInterviewInterviewsInterviewIdDeleteErrors[keyof DeleteInterviewInterviewsInterviewIdDeleteErrors];

export type DeleteInterviewInterviewsInterviewIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteInterviewInterviewsInterviewIdDeleteResponse = DeleteInterviewInterviewsInterviewIdDeleteResponses[keyof DeleteInterviewInterviewsInterviewIdDeleteResponses];

export type GetInterviewInterviewsInterviewIdGetData = {
    body?: never;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
    };
    query?: never;
    url: '/interviews/{interview_id}';
};

export type GetInterviewInterviewsInterviewIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetInterviewInterviewsInterviewIdGetError = GetInterviewInterviewsInterviewIdGetErrors[keyof GetInterviewInterviewsInterviewIdGetErrors];

export type GetInterviewInterviewsInterviewIdGetResponses = {
    /**
     * Successful Response
     */
    200: InterviewRead;
};

export type GetInterviewInterviewsInterviewIdGetResponse = GetInterviewInterviewsInterviewIdGetResponses[keyof GetInterviewInterviewsInterviewIdGetResponses];

export type UpdateInterviewInterviewsInterviewIdPatchData = {
    body: InterviewCreate;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
    };
    query?: never;
    url: '/interviews/{interview_id}';
};

export type UpdateInterviewInterviewsInterviewIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateInterviewInterviewsInterviewIdPatchError = UpdateInterviewInterviewsInterviewIdPatchErrors[keyof UpdateInterviewInterviewsInterviewIdPatchErrors];

export type UpdateInterviewInterviewsInterviewIdPatchResponses = {
    /**
     * Successful Response
     */
    200: InterviewRead;
};

export type UpdateInterviewInterviewsInterviewIdPatchResponse = UpdateInterviewInterviewsInterviewIdPatchResponses[keyof UpdateInterviewInterviewsInterviewIdPatchResponses];

export type GetInterviewMessagesInterviewsInterviewIdMessagesGetData = {
    body?: never;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
    };
    query?: never;
    url: '/interviews/{interview_id}/messages';
};

export type GetInterviewMessagesInterviewsInterviewIdMessagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetInterviewMessagesInterviewsInterviewIdMessagesGetError = GetInterviewMessagesInterviewsInterviewIdMessagesGetErrors[keyof GetInterviewMessagesInterviewsInterviewIdMessagesGetErrors];

export type GetInterviewMessagesInterviewsInterviewIdMessagesGetResponses = {
    /**
     * Response Get Interview Messages Interviews  Interview Id  Messages Get
     * Successful Response
     */
    200: Array<InterviewMessageRead>;
};

export type GetInterviewMessagesInterviewsInterviewIdMessagesGetResponse = GetInterviewMessagesInterviewsInterviewIdMessagesGetResponses[keyof GetInterviewMessagesInterviewsInterviewIdMessagesGetResponses];

export type PostInterviewMessageInterviewsInterviewIdMessagesPostData = {
    body: InterviewMessageCreateRequest;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
    };
    query?: never;
    url: '/interviews/{interview_id}/messages';
};

export type PostInterviewMessageInterviewsInterviewIdMessagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostInterviewMessageInterviewsInterviewIdMessagesPostError = PostInterviewMessageInterviewsInterviewIdMessagesPostErrors[keyof PostInterviewMessageInterviewsInterviewIdMessagesPostErrors];

export type PostInterviewMessageInterviewsInterviewIdMessagesPostResponses = {
    /**
     * Response Post Interview Message Interviews  Interview Id  Messages Post
     * Successful Response
     */
    200: Array<InterviewMessageRead>;
};

export type PostInterviewMessageInterviewsInterviewIdMessagesPostResponse = PostInterviewMessageInterviewsInterviewIdMessagesPostResponses[keyof PostInterviewMessageInterviewsInterviewIdMessagesPostResponses];

export type InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostData = {
    body?: never;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
    };
    query?: never;
    url: '/interviews/{interview_id}/messages/first';
};

export type InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostError = InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostErrors[keyof InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostErrors];

export type InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostResponses = {
    /**
     * Response Initialize First Message Interviews  Interview Id  Messages First Post
     * Successful Response
     */
    200: Array<InterviewMessageRead>;
};

export type InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostResponse = InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostResponses[keyof InitializeFirstMessageInterviewsInterviewIdMessagesFirstPostResponses];

export type ListInterviewNotesInterviewsInterviewIdNotesGetData = {
    body?: never;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/interviews/{interview_id}/notes';
};

export type ListInterviewNotesInterviewsInterviewIdNotesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListInterviewNotesInterviewsInterviewIdNotesGetError = ListInterviewNotesInterviewsInterviewIdNotesGetErrors[keyof ListInterviewNotesInterviewsInterviewIdNotesGetErrors];

export type ListInterviewNotesInterviewsInterviewIdNotesGetResponses = {
    /**
     * Response List Interview Notes Interviews  Interview Id  Notes Get
     * Successful Response
     */
    200: Array<InterviewNoteRead>;
};

export type ListInterviewNotesInterviewsInterviewIdNotesGetResponse = ListInterviewNotesInterviewsInterviewIdNotesGetResponses[keyof ListInterviewNotesInterviewsInterviewIdNotesGetResponses];

export type CreateInterviewNoteInterviewsInterviewIdNotesPostData = {
    body: InterviewNoteCreate;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
    };
    query?: never;
    url: '/interviews/{interview_id}/notes';
};

export type CreateInterviewNoteInterviewsInterviewIdNotesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateInterviewNoteInterviewsInterviewIdNotesPostError = CreateInterviewNoteInterviewsInterviewIdNotesPostErrors[keyof CreateInterviewNoteInterviewsInterviewIdNotesPostErrors];

export type CreateInterviewNoteInterviewsInterviewIdNotesPostResponses = {
    /**
     * Successful Response
     */
    201: InterviewNoteRead;
};

export type CreateInterviewNoteInterviewsInterviewIdNotesPostResponse = CreateInterviewNoteInterviewsInterviewIdNotesPostResponses[keyof CreateInterviewNoteInterviewsInterviewIdNotesPostResponses];

export type DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteData = {
    body?: never;
    path: {
        /**
         * Interview Id
         */
        interview_id: string;
        /**
         * Note Id
         */
        note_id: number;
    };
    query?: never;
    url: '/interviews/{interview_id}/notes/{note_id}';
};

export type DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteError = DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteErrors[keyof DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteErrors];

export type DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteResponse = DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteResponses[keyof DeleteInterviewNoteInterviewsInterviewIdNotesNoteIdDeleteResponses];

export type SigninAuthSigninPostData = {
    body: SignInRequest;
    path?: never;
    query?: never;
    url: '/auth/signin';
};

export type SigninAuthSigninPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SigninAuthSigninPostError = SigninAuthSigninPostErrors[keyof SigninAuthSigninPostErrors];

export type SigninAuthSigninPostResponses = {
    /**
     * Successful Response
     */
    200: TokenResponse;
};

export type SigninAuthSigninPostResponse = SigninAuthSigninPostResponses[keyof SigninAuthSigninPostResponses];

export type MeAuthMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type MeAuthMeGetResponses = {
    /**
     * Successful Response
     */
    200: MeResponse;
};

export type MeAuthMeGetResponse = MeAuthMeGetResponses[keyof MeAuthMeGetResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};